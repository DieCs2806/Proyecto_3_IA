import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from dependencias import Nodo,Grafo
import csv
from typing import List, Dict, Any, Tuple
import pyagrum as agr


def numDep(lector: Any):
    try:
        linea2 = next(lector) #Es la linea 2 porque en la funci√≥n grande ya le√≠mos la 1 en el lector
        nDep = 0
        for i, valor in enumerate(linea2):
            try:
                float(valor.strip()) #Cada que sea un valor flotante 
                nDep = i
                return nDep
            except ValueError:
                continue
        return len(linea2)
    except StopIteration:
        return 0


def leerArchivo(nomArch: str):
    try:
        with open(nomArch, 'r', encoding='utf-8') as archivo:
            nombre = nomArch[:-4]
            lector = csv.reader(archivo, skipinitialspace=True)
            encabezados = next(lector)
            nDep = numDep(lector)
            dependencias = [h.strip() for h in encabezados[:nDep]]
            opciones = [h.strip() for h in encabezados[nDep:]]
            print(f"nDep inferido: {nDep}")
            print(f"Dependencias: {dependencias}")
            print(f"Opciones: {opciones}")
            archivo.seek(0) #Volver a la primera linea del archivo
            lector = csv.reader(archivo, skipinitialspace=True)
            next(lector) # Saltar el encabezado
            probabilidades: Dict[Tuple[str], Dict[str, float]] = {}
            for lineas in lector:
                if not lineas:
                    continue
                opcionesDep = tuple(v.strip() for v in lineas[:nDep])
                columnasProb = tuple(float(v.strip()) for v in lineas [nDep:])
                asignacionProb = dict(zip(opciones, columnasProb))
                probabilidades[opcionesDep] = asignacionProb
            nodo = Nodo(nombre, dependencias,probabilidades, opciones)
            return nodo
    except FileNotFoundError:
        print(f"Error: No se pudo abrir el archivo '{nomArch}'.")
        return None, None
    except Exception as e:
        print(f"Ocurri√≥ un error inesperado: {e}")
        return None, None
    
def leer_dependencias(path_csv: str):
    df = pd.read_csv(path_csv)
    arcos = list(df[['Padre', 'Hijo']].itertuples(index=False, name=None))
    return arcos
    
def main():

    grafo = Grafo() 

    nodo_train = leerArchivo("Train.csv")
    nodo_rain = leerArchivo("Rain.csv")
    nodo_appt = leerArchivo("Appoinment.csv")
    nodo_maint = leerArchivo("Maintenance.csv")
    
    if not all([nodo_train, nodo_rain, nodo_appt, nodo_maint]):
         print("Error: No se pudieron cargar todos los archivos de nodos. Terminando.")
         return

    grafo.a√±adirNodo(nodo_train)
    grafo.a√±adirNodo(nodo_rain)
    grafo.a√±adirNodo(nodo_appt)
    grafo.a√±adirNodo(nodo_maint)
    
    print("\n--- ¬°Nodos Cargados en tu Grafo Exitosamente! ---")

    print(f"Probabilidades: {dict(list(nodo_train.probabilidades.items())[0:])}")

    # ... (Pasos 1 y 2 de carga de nodos en tu Grafo, sin cambios) ...

# --------------------------------------------------------
# PASO CR√çTICO DE CORRECCI√ìN: CONSTRUIR LA RED EN pyAgrum
# --------------------------------------------------------
    
    bn = agr.BayesNet("RedBayesiana")

    # 3. A√ëADIR LAS VARIABLES (NODOS) A LA RED DE pyAgrum (bn)
    
    for nombre, nodo in grafo.nodos.items():
        # Crear la variable LabelizedVariable de pyAgrum
        variable = agr.LabelizedVariable(nombre, nombre)
        
        # A√±adir las opciones/estados
        for opcion in nodo.opciones:
            variable.addLabel(opcion)
        
        # **Aseg√∫rate que la llamada sea EXCLUSIVAMENTE a bn.addVariable(variable)**
        # Si usas pyAgrum (agr), el m√©todo es addVariable()
        try:
             # Aqu√≠ es donde ocurre el error si la llamada no es correcta:
             bn.add(variable) 
             print(f"‚úÖ Variable '{nombre}' (pyAgrum) a√±adida con opciones: {nodo.opciones}")
        except TypeError as e:
             # Esto captura el error y te da m√°s informaci√≥n si persiste
             print(f"üö® ERROR: Fall√≥ al a√±adir la variable '{nombre}' a pyAgrum. Detalle: {e}")
             return # Detener si hay un error
             

    # 4. A√ëADIR LOS ARCOS (CONEXIONES) A LA RED DE pyAgrum (bn)
    # ... (Esta secci√≥n deber√≠a estar bien si el Paso 3 se ejecuta) ...
    arcos = leer_dependencias('Dependencias.csv')
    print(f"\n--- A√±adiendo Arcos a pyAgrum ---")
    
    for padre, hijo in arcos:
        # Esto ya funciona porque los nodos se agregaron en el paso 3
        try:
             bn.addArc(padre, hijo)
             print(f"üîó Arco a√±adido: {padre} -> {hijo}")
        except Exception as e:
             print(f"Error al a√±adir arco {padre} -> {hijo}: {e}")
             
    # 5. ASIGNAR LAS PROBABILIDADES (CPTs)
    # ... (Esta secci√≥n para CPTs deber√≠a estar bien si los nodos existen) ...
    # (El c√≥digo de asignaci√≥n de CPTs no causar√≠a el error TypeError de la imagen)
    # ...


if __name__ == "__main__":
    main()

